#  2018.09.24
#  *-link 软连接 指向文件名  
## 硬链接
创建硬链接会增加额外的记录项以引用文件  

对应于同一文件系统上一个物理文件  

每个目录引用相同的inode号  

创建时链接数递增  

删除文件时：  

rm命令递减计数的链接  

文件要存在，至少有一个链接数  

当链接数为零时，该文件被删除  

不能跨越驱动器或分区  

语法:  

ln filename [linkname]

硬链接 对一个文件起多个文件名  

硬链接不能跨分区  

硬链接不支持文件夹  

## 软连接   

原始文件一般用相对路径，相对路径一定是相对于软连接文件的路径  

## 硬链接与软连接的区别：  

同一个文件？硬链接是同一个文件，软连接不是  

跨分区？    硬链接不可以 软链接可以  

连接数增长？硬链接加软链接不加  

inode Number 是否相同？硬链接相同软链接不同  

原始文件删除，链文件可否访问？硬链接不受影响，软链接受影响  

大小？软连接的大小是路径大小，硬链接是文件大小  

支持目录？硬链接支持，软链接不支持  

相对路径？ 写法不一样


  

## 知识点小结  

reset 重置  

rmdir 删除空文件夹  

  set –c  不允许覆盖可追加  

  set +c   允许覆盖  

>| file 强制覆盖  

  
tr   ctrl+d 提交结果  

 ls –d  只显示当前目录的名称 而不进入目录  

预定义的字符类：man 7 glob  

[:digit:]：任意数字，相当于0-9  

[:lower:]：任意小写字母  

[:upper:]: 任意大写字母  

[:alpha:]: 任意大小写字母  

[:alnum:]：任意数字或字母  

[:blank:]：水平空白字符  

[:space:]：水平或垂直空白字符  

[:punct:]：标点符号  

[:print:]：可打印字符  

[:cntrl:]：控制（非打印）字符  

[:graph:]：图形字符  

[:xdigit:]：十六进制字符


## touch命令：  

touch [OPTION]... FILE...  

-a仅改变atime和ctime     

（atime 读时间，访问时间  ctime 状态更改时间 mtime 修改时间）  

-m 仅改变mtime和ctime  

-t [[CC]YY]MMDDhhmm[.ss]  

指定atime和mtime的时间戳  

-c如果文件不存在，则不予创建

touch 2018-09-25.log     创建带日期的log文件  

ll f[0-10]  只能显示f0 f1  
ll f[0-9]   显示f1..f9

## cp   
root账户因为权限大怕误覆盖 所以有别名 “cp=cp –I ”  

其他账户没有 可直接输入cp 命令进行覆盖  

-a 保留原文件的所有属性  

-av 保留属性能够看到过程  

cp 命令只适合复制普通命令  

-u:--update 只复制源比目标更新文件或目标不存在的文件  

-b:目标存在，覆盖前先备份  

--backup=numbered 目标存在，覆盖前先备份加数字后缀  

备份：  
cp  f1  f1.bak    
cp  f1{,.bak}  

## 移动和重命名文件
mv [OPTION]... [-T] SOURCE DEST  

mv [OPTION]... SOURCE... DIRECTORY  

mv [OPTION]... -t DIRECTORY SOURCE...  

常用选项：  

-i: 交互式  

-f: 强制  

-b: 目标存在，覆盖前先备份  

## rm
rm[OPTION]... FILE...   

常用选项：  

-i交互式  

-f强制删除  

-r递归  

--no-preserve-root 删除/    

示例：  

rm-rf/  

当某个被占用的文件被删除时，空间不能立刻被释放

创建空文件  

1 touch  

2 >>  

rename  批量修改  

rename----conf----conf----.bak----*.conf   
-----------字符串---替换---字符串---文件



##  tree
tree 显示目录树  

-d: 只显示目录  

-L level：指定显示的层级数目  

-P pattern: 只显示由指定pattern匹配到的路径  

mkdir创建目录  

-p: 存在于不报错，且可自动创建所需的各目录  

-v: 显示详细信息  

-m MODE: 创建目录时直接指定权限  

rmdir删除空目录  

-p: 递归删除父空目录  

-v: 显示详细信息  

rm-r递归删除目录树  

# 2018.09.28
新建文件的默认最大权限为：666 （可自行改成777）  
文件夹的默认最大为：777

## umask值能够影响文件和文件夹的权限 

## suid特殊权限（-s）：只针对二进制文件，不能适用于脚本  

suid：作用于二进制可执行的文件上   功能：当用户执行此文件的时候，就临时切换成文件所有者的权限  
sgid：作用于二进制可执行的文件上   功能：当用户执行此文件的时候，就临时切换成文件所有组的权限  
      作用于目录上，功能：对用户在此目录建新文件时，此新文件的所属组继承目录的所属组。  
sticky：作用于目录上，功能：对目录的文件只能删除自己的文件  

## Linux文件系统上的特殊权限  

SUID（4）, SGID（2）, Sticky（1）  
三种常用权限：r, w, x user, group, other  
安全上下文  
前提：进程有属主和属组；文件有属主和属组  
(1) 任何一个可执行程序文件能不能启动为进程,取决发起者对程序文件是否拥有执行权限  
(2) 启动为进程之后，其进程的属主为发起者,进程的属组为发起者所属的组  
(3) 进程访问文件时的权限，取决于进程的发起者  
(a) 进程的发起者，同文件的属主：则应用文件属主权限  
(b) 进程的发起者，属于文件属组；则应用文件属组权限  
(c) 应用文件“其它”权限  

## 可执行文件上SUID权限  

.任何一个可执行程序文件能不能启动为进程：取决发起者对程序文件是否拥有执行权限  
.启动为进程之后，其进程的属主为原程序文件的属主  
.SUID只对二进制可执行程序有效  
.SUID设置在目录上无意义  
.权限设定：  
chmod  u+s  FILE...  
chmod  u-s  FILE...  

## 可执行文件上SGID权限

任何一个可执行程序文件能不能启动为进程：取决发起者对程序文件是否拥有执行权限   
启动为进程之后，其进程的属组为原程序文件的属组  
权限设定：  
chmod  g+s  FILE...  
chmod  g-s  FILE...  




### 目录上的SGID权限  

默认情况下，用户创建文件时，其属组为此用户所属的主组  
一旦某目录被设定了SGID，则对此目录有写权限的用户在此目录中创建的文件所属的组为此目录的属组  
通常用于创建一个协作目录    
权限设定：  
chmod  g+s  DIR...  
chmod  g-s  DIR...  


## Sticky 位

具有写权限的目录通常用户可以删除该目录中的任何文件，无论该文件的权限或拥有权  
在目录设置Sticky 位，只有文件的所有者或root可以删除该文件  
sticky 设置在文件上无意义  
权限设定：  
chmod  o+t  DIR...  
chmod  o-t  DIR...  
例如：  
ls-ld  /tmp  drwx rwx rwt  12 root root 4096 Nov 215:44 /tmp  


## 特殊权限数字法
例如：chmod  4777  /data/f1  

权限位映射：  
SUID：user，占据属主的执行权限位  
s：属主拥有x权限  
S：属主没有x权限  
SGID:group占据属组的执行权限位  
s:group拥有x的权限  
S：group没有x的权限  
Sticky:other,占据other的执行权限位  
t：other拥有x的权限  
T other 没有x的权限   
两个文件的交集，并集，不同     
交集：cat  f1  f2|sort  |uniq  -d    

       grep  -f  f1  f2  
并集：cat  f1  f2|sort  -u  
不同：cat  f1  f2 |sort  |uniq  -u  
